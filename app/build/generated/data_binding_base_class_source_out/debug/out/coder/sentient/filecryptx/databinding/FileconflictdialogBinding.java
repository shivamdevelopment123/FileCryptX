// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FileconflictdialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox choiceRememberCheckBox;

  @NonNull
  public final TextView destinationFileName;

  @NonNull
  public final ImageView destinationFilePreview;

  @NonNull
  public final TextView destinationFileSize;

  @NonNull
  public final AppCompatButton fileconflictCancelButton;

  @NonNull
  public final LinearLayout keepNewFile;

  @NonNull
  public final LinearLayout keepOldFile;

  @NonNull
  public final AppCompatButton keepbothButton;

  @NonNull
  public final TextView sourceFileName;

  @NonNull
  public final ImageView sourceFilePreview;

  @NonNull
  public final TextView sourceFileSize;

  private FileconflictdialogBinding(@NonNull LinearLayout rootView,
      @NonNull CheckBox choiceRememberCheckBox, @NonNull TextView destinationFileName,
      @NonNull ImageView destinationFilePreview, @NonNull TextView destinationFileSize,
      @NonNull AppCompatButton fileconflictCancelButton, @NonNull LinearLayout keepNewFile,
      @NonNull LinearLayout keepOldFile, @NonNull AppCompatButton keepbothButton,
      @NonNull TextView sourceFileName, @NonNull ImageView sourceFilePreview,
      @NonNull TextView sourceFileSize) {
    this.rootView = rootView;
    this.choiceRememberCheckBox = choiceRememberCheckBox;
    this.destinationFileName = destinationFileName;
    this.destinationFilePreview = destinationFilePreview;
    this.destinationFileSize = destinationFileSize;
    this.fileconflictCancelButton = fileconflictCancelButton;
    this.keepNewFile = keepNewFile;
    this.keepOldFile = keepOldFile;
    this.keepbothButton = keepbothButton;
    this.sourceFileName = sourceFileName;
    this.sourceFilePreview = sourceFilePreview;
    this.sourceFileSize = sourceFileSize;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FileconflictdialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FileconflictdialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fileconflictdialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FileconflictdialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.choice_remember_checkBox;
      CheckBox choiceRememberCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (choiceRememberCheckBox == null) {
        break missingId;
      }

      id = R.id.destination_file_name;
      TextView destinationFileName = ViewBindings.findChildViewById(rootView, id);
      if (destinationFileName == null) {
        break missingId;
      }

      id = R.id.destination_file_preview;
      ImageView destinationFilePreview = ViewBindings.findChildViewById(rootView, id);
      if (destinationFilePreview == null) {
        break missingId;
      }

      id = R.id.destination_file_size;
      TextView destinationFileSize = ViewBindings.findChildViewById(rootView, id);
      if (destinationFileSize == null) {
        break missingId;
      }

      id = R.id.fileconflict_cancel_button;
      AppCompatButton fileconflictCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (fileconflictCancelButton == null) {
        break missingId;
      }

      id = R.id.keep_new_file;
      LinearLayout keepNewFile = ViewBindings.findChildViewById(rootView, id);
      if (keepNewFile == null) {
        break missingId;
      }

      id = R.id.keep_old_file;
      LinearLayout keepOldFile = ViewBindings.findChildViewById(rootView, id);
      if (keepOldFile == null) {
        break missingId;
      }

      id = R.id.keepboth_button;
      AppCompatButton keepbothButton = ViewBindings.findChildViewById(rootView, id);
      if (keepbothButton == null) {
        break missingId;
      }

      id = R.id.source_file_name;
      TextView sourceFileName = ViewBindings.findChildViewById(rootView, id);
      if (sourceFileName == null) {
        break missingId;
      }

      id = R.id.source_file_preview;
      ImageView sourceFilePreview = ViewBindings.findChildViewById(rootView, id);
      if (sourceFilePreview == null) {
        break missingId;
      }

      id = R.id.source_file_size;
      TextView sourceFileSize = ViewBindings.findChildViewById(rootView, id);
      if (sourceFileSize == null) {
        break missingId;
      }

      return new FileconflictdialogBinding((LinearLayout) rootView, choiceRememberCheckBox,
          destinationFileName, destinationFilePreview, destinationFileSize,
          fileconflictCancelButton, keepNewFile, keepOldFile, keepbothButton, sourceFileName,
          sourceFilePreview, sourceFileSize);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

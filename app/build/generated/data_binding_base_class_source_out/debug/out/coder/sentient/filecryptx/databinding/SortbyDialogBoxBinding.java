// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SortbyDialogBoxBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RadioGroup ascendingDescendingGroup;

  @NonNull
  public final RadioButton ascendingSort;

  @NonNull
  public final RadioButton descendingSort;

  @NonNull
  public final RadioButton lastModifiedSort;

  @NonNull
  public final RadioButton nameSort;

  @NonNull
  public final RadioButton sizeSort;

  @NonNull
  public final AppCompatButton sortDialogCancelButton;

  @NonNull
  public final AppCompatButton sortDialogOkButton;

  @NonNull
  public final RadioGroup sortGroupButton;

  @NonNull
  public final RadioButton typeSort;

  private SortbyDialogBoxBinding(@NonNull LinearLayout rootView,
      @NonNull RadioGroup ascendingDescendingGroup, @NonNull RadioButton ascendingSort,
      @NonNull RadioButton descendingSort, @NonNull RadioButton lastModifiedSort,
      @NonNull RadioButton nameSort, @NonNull RadioButton sizeSort,
      @NonNull AppCompatButton sortDialogCancelButton, @NonNull AppCompatButton sortDialogOkButton,
      @NonNull RadioGroup sortGroupButton, @NonNull RadioButton typeSort) {
    this.rootView = rootView;
    this.ascendingDescendingGroup = ascendingDescendingGroup;
    this.ascendingSort = ascendingSort;
    this.descendingSort = descendingSort;
    this.lastModifiedSort = lastModifiedSort;
    this.nameSort = nameSort;
    this.sizeSort = sizeSort;
    this.sortDialogCancelButton = sortDialogCancelButton;
    this.sortDialogOkButton = sortDialogOkButton;
    this.sortGroupButton = sortGroupButton;
    this.typeSort = typeSort;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SortbyDialogBoxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SortbyDialogBoxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.sortby_dialog_box, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SortbyDialogBoxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ascending_descending_group;
      RadioGroup ascendingDescendingGroup = ViewBindings.findChildViewById(rootView, id);
      if (ascendingDescendingGroup == null) {
        break missingId;
      }

      id = R.id.ascending_sort;
      RadioButton ascendingSort = ViewBindings.findChildViewById(rootView, id);
      if (ascendingSort == null) {
        break missingId;
      }

      id = R.id.descending_sort;
      RadioButton descendingSort = ViewBindings.findChildViewById(rootView, id);
      if (descendingSort == null) {
        break missingId;
      }

      id = R.id.last_modified_sort;
      RadioButton lastModifiedSort = ViewBindings.findChildViewById(rootView, id);
      if (lastModifiedSort == null) {
        break missingId;
      }

      id = R.id.name_sort;
      RadioButton nameSort = ViewBindings.findChildViewById(rootView, id);
      if (nameSort == null) {
        break missingId;
      }

      id = R.id.size_sort;
      RadioButton sizeSort = ViewBindings.findChildViewById(rootView, id);
      if (sizeSort == null) {
        break missingId;
      }

      id = R.id.sort_dialog_cancel_button;
      AppCompatButton sortDialogCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (sortDialogCancelButton == null) {
        break missingId;
      }

      id = R.id.sort_dialog_ok_button;
      AppCompatButton sortDialogOkButton = ViewBindings.findChildViewById(rootView, id);
      if (sortDialogOkButton == null) {
        break missingId;
      }

      id = R.id.sort_group_button;
      RadioGroup sortGroupButton = ViewBindings.findChildViewById(rootView, id);
      if (sortGroupButton == null) {
        break missingId;
      }

      id = R.id.type_sort;
      RadioButton typeSort = ViewBindings.findChildViewById(rootView, id);
      if (typeSort == null) {
        break missingId;
      }

      return new SortbyDialogBoxBinding((LinearLayout) rootView, ascendingDescendingGroup,
          ascendingSort, descendingSort, lastModifiedSort, nameSort, sizeSort,
          sortDialogCancelButton, sortDialogOkButton, sortGroupButton, typeSort);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

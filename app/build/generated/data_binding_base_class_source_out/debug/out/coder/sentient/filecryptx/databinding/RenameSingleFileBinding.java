// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RenameSingleFileBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextInputLayout filledTextField;

  @NonNull
  public final AppCompatButton renameSingleCancelButton;

  @NonNull
  public final TextInputEditText renameSingleEdittext;

  @NonNull
  public final AppCompatButton renameSingleOkButton;

  private RenameSingleFileBinding(@NonNull LinearLayout rootView,
      @NonNull TextInputLayout filledTextField, @NonNull AppCompatButton renameSingleCancelButton,
      @NonNull TextInputEditText renameSingleEdittext,
      @NonNull AppCompatButton renameSingleOkButton) {
    this.rootView = rootView;
    this.filledTextField = filledTextField;
    this.renameSingleCancelButton = renameSingleCancelButton;
    this.renameSingleEdittext = renameSingleEdittext;
    this.renameSingleOkButton = renameSingleOkButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RenameSingleFileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RenameSingleFileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.rename_single_file, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RenameSingleFileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filledTextField;
      TextInputLayout filledTextField = ViewBindings.findChildViewById(rootView, id);
      if (filledTextField == null) {
        break missingId;
      }

      id = R.id.rename_single_cancel_button;
      AppCompatButton renameSingleCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (renameSingleCancelButton == null) {
        break missingId;
      }

      id = R.id.rename_single_edittext;
      TextInputEditText renameSingleEdittext = ViewBindings.findChildViewById(rootView, id);
      if (renameSingleEdittext == null) {
        break missingId;
      }

      id = R.id.rename_single_ok_button;
      AppCompatButton renameSingleOkButton = ViewBindings.findChildViewById(rootView, id);
      if (renameSingleOkButton == null) {
        break missingId;
      }

      return new RenameSingleFileBinding((LinearLayout) rootView, filledTextField,
          renameSingleCancelButton, renameSingleEdittext, renameSingleOkButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

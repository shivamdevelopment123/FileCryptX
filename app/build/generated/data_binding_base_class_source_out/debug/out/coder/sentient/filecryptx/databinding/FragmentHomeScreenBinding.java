// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeScreenBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialCardView ExternalStorageCardview;

  @NonNull
  public final MaterialCardView InternalStorageCardview;

  @NonNull
  public final LinearLayout apksButton;

  @NonNull
  public final LinearLayout archieveButton;

  @NonNull
  public final MaterialCardView bookmarkCardView;

  @NonNull
  public final GridLayout categoriesIcons;

  @NonNull
  public final LinearLayout documentsButton;

  @NonNull
  public final LinearLayout downloadsButton;

  @NonNull
  public final ImageView homescreenSettingsButton;

  @NonNull
  public final LinearLayout musicButton;

  @NonNull
  public final LinearLayout photosButton;

  @NonNull
  public final FrameLayout progressContainer;

  @NonNull
  public final LinearLayout recentEmptyRecyclerViewImage;

  @NonNull
  public final RecyclerView recentRecyclerView;

  @NonNull
  public final TextView recentseeall;

  @NonNull
  public final TextView sdcardName;

  @NonNull
  public final FrameLayout sdcardprogressContainer;

  @NonNull
  public final TextView sdcardprogressPercentage;

  @NonNull
  public final TextView sdcardstorageAvailable;

  @NonNull
  public final RelativeLayout sdcardstorageInfoContainer;

  @NonNull
  public final ProgressBar sdcardstorageProgressBar;

  @NonNull
  public final TextView storageAvailable;

  @NonNull
  public final RelativeLayout storageInfoContainer;

  @NonNull
  public final TextView storageName;

  @NonNull
  public final TextView storagePercentage;

  @NonNull
  public final ProgressBar storageProgressBar;

  @NonNull
  public final MaterialCardView trashBinCardView;

  @NonNull
  public final MaterialCardView usbStorageCardview;

  @NonNull
  public final FrameLayout usbprogressContainer;

  @NonNull
  public final TextView usbprogressPercentage;

  @NonNull
  public final TextView usbstorageAvailable;

  @NonNull
  public final RelativeLayout usbstorageInfoContainer;

  @NonNull
  public final TextView usbstorageName;

  @NonNull
  public final ProgressBar usbstorageProgressBar;

  @NonNull
  public final MaterialCardView vaultBinCardView;

  @NonNull
  public final LinearLayout videosButton;

  private FragmentHomeScreenBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialCardView ExternalStorageCardview,
      @NonNull MaterialCardView InternalStorageCardview, @NonNull LinearLayout apksButton,
      @NonNull LinearLayout archieveButton, @NonNull MaterialCardView bookmarkCardView,
      @NonNull GridLayout categoriesIcons, @NonNull LinearLayout documentsButton,
      @NonNull LinearLayout downloadsButton, @NonNull ImageView homescreenSettingsButton,
      @NonNull LinearLayout musicButton, @NonNull LinearLayout photosButton,
      @NonNull FrameLayout progressContainer, @NonNull LinearLayout recentEmptyRecyclerViewImage,
      @NonNull RecyclerView recentRecyclerView, @NonNull TextView recentseeall,
      @NonNull TextView sdcardName, @NonNull FrameLayout sdcardprogressContainer,
      @NonNull TextView sdcardprogressPercentage, @NonNull TextView sdcardstorageAvailable,
      @NonNull RelativeLayout sdcardstorageInfoContainer,
      @NonNull ProgressBar sdcardstorageProgressBar, @NonNull TextView storageAvailable,
      @NonNull RelativeLayout storageInfoContainer, @NonNull TextView storageName,
      @NonNull TextView storagePercentage, @NonNull ProgressBar storageProgressBar,
      @NonNull MaterialCardView trashBinCardView, @NonNull MaterialCardView usbStorageCardview,
      @NonNull FrameLayout usbprogressContainer, @NonNull TextView usbprogressPercentage,
      @NonNull TextView usbstorageAvailable, @NonNull RelativeLayout usbstorageInfoContainer,
      @NonNull TextView usbstorageName, @NonNull ProgressBar usbstorageProgressBar,
      @NonNull MaterialCardView vaultBinCardView, @NonNull LinearLayout videosButton) {
    this.rootView = rootView;
    this.ExternalStorageCardview = ExternalStorageCardview;
    this.InternalStorageCardview = InternalStorageCardview;
    this.apksButton = apksButton;
    this.archieveButton = archieveButton;
    this.bookmarkCardView = bookmarkCardView;
    this.categoriesIcons = categoriesIcons;
    this.documentsButton = documentsButton;
    this.downloadsButton = downloadsButton;
    this.homescreenSettingsButton = homescreenSettingsButton;
    this.musicButton = musicButton;
    this.photosButton = photosButton;
    this.progressContainer = progressContainer;
    this.recentEmptyRecyclerViewImage = recentEmptyRecyclerViewImage;
    this.recentRecyclerView = recentRecyclerView;
    this.recentseeall = recentseeall;
    this.sdcardName = sdcardName;
    this.sdcardprogressContainer = sdcardprogressContainer;
    this.sdcardprogressPercentage = sdcardprogressPercentage;
    this.sdcardstorageAvailable = sdcardstorageAvailable;
    this.sdcardstorageInfoContainer = sdcardstorageInfoContainer;
    this.sdcardstorageProgressBar = sdcardstorageProgressBar;
    this.storageAvailable = storageAvailable;
    this.storageInfoContainer = storageInfoContainer;
    this.storageName = storageName;
    this.storagePercentage = storagePercentage;
    this.storageProgressBar = storageProgressBar;
    this.trashBinCardView = trashBinCardView;
    this.usbStorageCardview = usbStorageCardview;
    this.usbprogressContainer = usbprogressContainer;
    this.usbprogressPercentage = usbprogressPercentage;
    this.usbstorageAvailable = usbstorageAvailable;
    this.usbstorageInfoContainer = usbstorageInfoContainer;
    this.usbstorageName = usbstorageName;
    this.usbstorageProgressBar = usbstorageProgressBar;
    this.vaultBinCardView = vaultBinCardView;
    this.videosButton = videosButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home_screen, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeScreenBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.External_Storage_cardview;
      MaterialCardView ExternalStorageCardview = ViewBindings.findChildViewById(rootView, id);
      if (ExternalStorageCardview == null) {
        break missingId;
      }

      id = R.id.Internal_Storage_cardview;
      MaterialCardView InternalStorageCardview = ViewBindings.findChildViewById(rootView, id);
      if (InternalStorageCardview == null) {
        break missingId;
      }

      id = R.id.apks_button;
      LinearLayout apksButton = ViewBindings.findChildViewById(rootView, id);
      if (apksButton == null) {
        break missingId;
      }

      id = R.id.archieve_button;
      LinearLayout archieveButton = ViewBindings.findChildViewById(rootView, id);
      if (archieveButton == null) {
        break missingId;
      }

      id = R.id.bookmark_cardView;
      MaterialCardView bookmarkCardView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkCardView == null) {
        break missingId;
      }

      id = R.id.categoriesIcons;
      GridLayout categoriesIcons = ViewBindings.findChildViewById(rootView, id);
      if (categoriesIcons == null) {
        break missingId;
      }

      id = R.id.documents_button;
      LinearLayout documentsButton = ViewBindings.findChildViewById(rootView, id);
      if (documentsButton == null) {
        break missingId;
      }

      id = R.id.downloads_button;
      LinearLayout downloadsButton = ViewBindings.findChildViewById(rootView, id);
      if (downloadsButton == null) {
        break missingId;
      }

      id = R.id.homescreen_settings_button;
      ImageView homescreenSettingsButton = ViewBindings.findChildViewById(rootView, id);
      if (homescreenSettingsButton == null) {
        break missingId;
      }

      id = R.id.music_button;
      LinearLayout musicButton = ViewBindings.findChildViewById(rootView, id);
      if (musicButton == null) {
        break missingId;
      }

      id = R.id.photos_button;
      LinearLayout photosButton = ViewBindings.findChildViewById(rootView, id);
      if (photosButton == null) {
        break missingId;
      }

      id = R.id.progressContainer;
      FrameLayout progressContainer = ViewBindings.findChildViewById(rootView, id);
      if (progressContainer == null) {
        break missingId;
      }

      id = R.id.recentEmptyRecyclerViewImage;
      LinearLayout recentEmptyRecyclerViewImage = ViewBindings.findChildViewById(rootView, id);
      if (recentEmptyRecyclerViewImage == null) {
        break missingId;
      }

      id = R.id.recentRecyclerView;
      RecyclerView recentRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recentRecyclerView == null) {
        break missingId;
      }

      id = R.id.recentseeall;
      TextView recentseeall = ViewBindings.findChildViewById(rootView, id);
      if (recentseeall == null) {
        break missingId;
      }

      id = R.id.sdcardName;
      TextView sdcardName = ViewBindings.findChildViewById(rootView, id);
      if (sdcardName == null) {
        break missingId;
      }

      id = R.id.sdcardprogressContainer;
      FrameLayout sdcardprogressContainer = ViewBindings.findChildViewById(rootView, id);
      if (sdcardprogressContainer == null) {
        break missingId;
      }

      id = R.id.sdcardprogressPercentage;
      TextView sdcardprogressPercentage = ViewBindings.findChildViewById(rootView, id);
      if (sdcardprogressPercentage == null) {
        break missingId;
      }

      id = R.id.sdcardstorageAvailable;
      TextView sdcardstorageAvailable = ViewBindings.findChildViewById(rootView, id);
      if (sdcardstorageAvailable == null) {
        break missingId;
      }

      id = R.id.sdcardstorageInfoContainer;
      RelativeLayout sdcardstorageInfoContainer = ViewBindings.findChildViewById(rootView, id);
      if (sdcardstorageInfoContainer == null) {
        break missingId;
      }

      id = R.id.sdcardstorageProgressBar;
      ProgressBar sdcardstorageProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (sdcardstorageProgressBar == null) {
        break missingId;
      }

      id = R.id.storageAvailable;
      TextView storageAvailable = ViewBindings.findChildViewById(rootView, id);
      if (storageAvailable == null) {
        break missingId;
      }

      id = R.id.storageInfoContainer;
      RelativeLayout storageInfoContainer = ViewBindings.findChildViewById(rootView, id);
      if (storageInfoContainer == null) {
        break missingId;
      }

      id = R.id.storageName;
      TextView storageName = ViewBindings.findChildViewById(rootView, id);
      if (storageName == null) {
        break missingId;
      }

      id = R.id.storagePercentage;
      TextView storagePercentage = ViewBindings.findChildViewById(rootView, id);
      if (storagePercentage == null) {
        break missingId;
      }

      id = R.id.storageProgressBar;
      ProgressBar storageProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (storageProgressBar == null) {
        break missingId;
      }

      id = R.id.trash_bin_cardView;
      MaterialCardView trashBinCardView = ViewBindings.findChildViewById(rootView, id);
      if (trashBinCardView == null) {
        break missingId;
      }

      id = R.id.usb_Storage_cardview;
      MaterialCardView usbStorageCardview = ViewBindings.findChildViewById(rootView, id);
      if (usbStorageCardview == null) {
        break missingId;
      }

      id = R.id.usbprogressContainer;
      FrameLayout usbprogressContainer = ViewBindings.findChildViewById(rootView, id);
      if (usbprogressContainer == null) {
        break missingId;
      }

      id = R.id.usbprogressPercentage;
      TextView usbprogressPercentage = ViewBindings.findChildViewById(rootView, id);
      if (usbprogressPercentage == null) {
        break missingId;
      }

      id = R.id.usbstorageAvailable;
      TextView usbstorageAvailable = ViewBindings.findChildViewById(rootView, id);
      if (usbstorageAvailable == null) {
        break missingId;
      }

      id = R.id.usbstorageInfoContainer;
      RelativeLayout usbstorageInfoContainer = ViewBindings.findChildViewById(rootView, id);
      if (usbstorageInfoContainer == null) {
        break missingId;
      }

      id = R.id.usbstorageName;
      TextView usbstorageName = ViewBindings.findChildViewById(rootView, id);
      if (usbstorageName == null) {
        break missingId;
      }

      id = R.id.usbstorageProgressBar;
      ProgressBar usbstorageProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (usbstorageProgressBar == null) {
        break missingId;
      }

      id = R.id.vault_bin_cardView;
      MaterialCardView vaultBinCardView = ViewBindings.findChildViewById(rootView, id);
      if (vaultBinCardView == null) {
        break missingId;
      }

      id = R.id.videos_button;
      LinearLayout videosButton = ViewBindings.findChildViewById(rootView, id);
      if (videosButton == null) {
        break missingId;
      }

      return new FragmentHomeScreenBinding((LinearLayout) rootView, ExternalStorageCardview,
          InternalStorageCardview, apksButton, archieveButton, bookmarkCardView, categoriesIcons,
          documentsButton, downloadsButton, homescreenSettingsButton, musicButton, photosButton,
          progressContainer, recentEmptyRecyclerViewImage, recentRecyclerView, recentseeall,
          sdcardName, sdcardprogressContainer, sdcardprogressPercentage, sdcardstorageAvailable,
          sdcardstorageInfoContainer, sdcardstorageProgressBar, storageAvailable,
          storageInfoContainer, storageName, storagePercentage, storageProgressBar,
          trashBinCardView, usbStorageCardview, usbprogressContainer, usbprogressPercentage,
          usbstorageAvailable, usbstorageInfoContainer, usbstorageName, usbstorageProgressBar,
          vaultBinCardView, videosButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DecryptiondialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout archivePasswordLayout;

  @NonNull
  public final AppCompatButton decryptButton;

  @NonNull
  public final AppCompatButton decryptCancelButton;

  @NonNull
  public final TextView decryptSelectedFilesName;

  @NonNull
  public final EditText decryptionPasswordEditText;

  @NonNull
  public final TextView errorMessageDecryptdialog;

  private DecryptiondialogBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout archivePasswordLayout, @NonNull AppCompatButton decryptButton,
      @NonNull AppCompatButton decryptCancelButton, @NonNull TextView decryptSelectedFilesName,
      @NonNull EditText decryptionPasswordEditText, @NonNull TextView errorMessageDecryptdialog) {
    this.rootView = rootView;
    this.archivePasswordLayout = archivePasswordLayout;
    this.decryptButton = decryptButton;
    this.decryptCancelButton = decryptCancelButton;
    this.decryptSelectedFilesName = decryptSelectedFilesName;
    this.decryptionPasswordEditText = decryptionPasswordEditText;
    this.errorMessageDecryptdialog = errorMessageDecryptdialog;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DecryptiondialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DecryptiondialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.decryptiondialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DecryptiondialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.archivePasswordLayout;
      LinearLayout archivePasswordLayout = ViewBindings.findChildViewById(rootView, id);
      if (archivePasswordLayout == null) {
        break missingId;
      }

      id = R.id.decrypt_button;
      AppCompatButton decryptButton = ViewBindings.findChildViewById(rootView, id);
      if (decryptButton == null) {
        break missingId;
      }

      id = R.id.decrypt_cancel_button;
      AppCompatButton decryptCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (decryptCancelButton == null) {
        break missingId;
      }

      id = R.id.decrypt_selectedFiles_name;
      TextView decryptSelectedFilesName = ViewBindings.findChildViewById(rootView, id);
      if (decryptSelectedFilesName == null) {
        break missingId;
      }

      id = R.id.decryptionPasswordEditText;
      EditText decryptionPasswordEditText = ViewBindings.findChildViewById(rootView, id);
      if (decryptionPasswordEditText == null) {
        break missingId;
      }

      id = R.id.error_message_decryptdialog;
      TextView errorMessageDecryptdialog = ViewBindings.findChildViewById(rootView, id);
      if (errorMessageDecryptdialog == null) {
        break missingId;
      }

      return new DecryptiondialogBinding((LinearLayout) rootView, archivePasswordLayout,
          decryptButton, decryptCancelButton, decryptSelectedFilesName, decryptionPasswordEditText,
          errorMessageDecryptdialog);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

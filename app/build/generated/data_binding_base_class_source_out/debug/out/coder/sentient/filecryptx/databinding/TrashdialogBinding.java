// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TrashdialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView trashBinDeletebutton;

  @NonNull
  public final CardView trashBinRestoreButton;

  @NonNull
  public final TextView trashCancelButton;

  @NonNull
  public final TextView trashFileNameShow;

  private TrashdialogBinding(@NonNull LinearLayout rootView, @NonNull CardView trashBinDeletebutton,
      @NonNull CardView trashBinRestoreButton, @NonNull TextView trashCancelButton,
      @NonNull TextView trashFileNameShow) {
    this.rootView = rootView;
    this.trashBinDeletebutton = trashBinDeletebutton;
    this.trashBinRestoreButton = trashBinRestoreButton;
    this.trashCancelButton = trashCancelButton;
    this.trashFileNameShow = trashFileNameShow;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TrashdialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TrashdialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.trashdialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TrashdialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.trashBin_deletebutton;
      CardView trashBinDeletebutton = ViewBindings.findChildViewById(rootView, id);
      if (trashBinDeletebutton == null) {
        break missingId;
      }

      id = R.id.trashBin_restoreButton;
      CardView trashBinRestoreButton = ViewBindings.findChildViewById(rootView, id);
      if (trashBinRestoreButton == null) {
        break missingId;
      }

      id = R.id.trashCancelButton;
      TextView trashCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (trashCancelButton == null) {
        break missingId;
      }

      id = R.id.trashFileNameShow;
      TextView trashFileNameShow = ViewBindings.findChildViewById(rootView, id);
      if (trashFileNameShow == null) {
        break missingId;
      }

      return new TrashdialogBinding((LinearLayout) rootView, trashBinDeletebutton,
          trashBinRestoreButton, trashCancelButton, trashFileNameShow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

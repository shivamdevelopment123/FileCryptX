// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFileInfoBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView fileInfoBackArrow;

  @NonNull
  public final TextView fileInfoFirstFileName;

  @NonNull
  public final ImageView fileInfoImageView;

  @NonNull
  public final TextView fileinfoCount;

  @NonNull
  public final TextView fileinfoFileLocation;

  @NonNull
  public final TextView fileinfoLastModified;

  @NonNull
  public final TextView fileinfoName;

  @NonNull
  public final TextView fileinfoSize;

  @NonNull
  public final TextView fileinfoType;

  private FragmentFileInfoBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView fileInfoBackArrow, @NonNull TextView fileInfoFirstFileName,
      @NonNull ImageView fileInfoImageView, @NonNull TextView fileinfoCount,
      @NonNull TextView fileinfoFileLocation, @NonNull TextView fileinfoLastModified,
      @NonNull TextView fileinfoName, @NonNull TextView fileinfoSize,
      @NonNull TextView fileinfoType) {
    this.rootView = rootView;
    this.fileInfoBackArrow = fileInfoBackArrow;
    this.fileInfoFirstFileName = fileInfoFirstFileName;
    this.fileInfoImageView = fileInfoImageView;
    this.fileinfoCount = fileinfoCount;
    this.fileinfoFileLocation = fileinfoFileLocation;
    this.fileinfoLastModified = fileinfoLastModified;
    this.fileinfoName = fileinfoName;
    this.fileinfoSize = fileinfoSize;
    this.fileinfoType = fileinfoType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFileInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFileInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_file_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFileInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fileInfoBackArrow;
      ImageView fileInfoBackArrow = ViewBindings.findChildViewById(rootView, id);
      if (fileInfoBackArrow == null) {
        break missingId;
      }

      id = R.id.fileInfo_FirstFileName;
      TextView fileInfoFirstFileName = ViewBindings.findChildViewById(rootView, id);
      if (fileInfoFirstFileName == null) {
        break missingId;
      }

      id = R.id.fileInfoImageView;
      ImageView fileInfoImageView = ViewBindings.findChildViewById(rootView, id);
      if (fileInfoImageView == null) {
        break missingId;
      }

      id = R.id.fileinfo_count;
      TextView fileinfoCount = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoCount == null) {
        break missingId;
      }

      id = R.id.fileinfo_fileLocation;
      TextView fileinfoFileLocation = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoFileLocation == null) {
        break missingId;
      }

      id = R.id.fileinfo_lastModified;
      TextView fileinfoLastModified = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoLastModified == null) {
        break missingId;
      }

      id = R.id.fileinfo_name;
      TextView fileinfoName = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoName == null) {
        break missingId;
      }

      id = R.id.fileinfo_size;
      TextView fileinfoSize = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoSize == null) {
        break missingId;
      }

      id = R.id.fileinfo_type;
      TextView fileinfoType = ViewBindings.findChildViewById(rootView, id);
      if (fileinfoType == null) {
        break missingId;
      }

      return new FragmentFileInfoBinding((LinearLayout) rootView, fileInfoBackArrow,
          fileInfoFirstFileName, fileInfoImageView, fileinfoCount, fileinfoFileLocation,
          fileinfoLastModified, fileinfoName, fileinfoSize, fileinfoType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

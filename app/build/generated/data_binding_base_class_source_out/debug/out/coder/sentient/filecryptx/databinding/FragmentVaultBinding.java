// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentVaultBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView MoveOutOfVault;

  @NonNull
  public final CardView VaultTopPopUpNavigation;

  @NonNull
  public final TextView numberOfSelectedFilesVault;

  @NonNull
  public final CardView vaultBottomPopUpNavigation;

  @NonNull
  public final ImageView vaultClearFileButton;

  @NonNull
  public final ImageView vaultFileDelete;

  @NonNull
  public final ImageView vaultFileInfo;

  @NonNull
  public final RecyclerView vaultRecyclerView;

  @NonNull
  public final ImageView vaultSelectAllButton;

  @NonNull
  public final MaterialToolbar vaultToolBar;

  private FragmentVaultBinding(@NonNull LinearLayout rootView, @NonNull ImageView MoveOutOfVault,
      @NonNull CardView VaultTopPopUpNavigation, @NonNull TextView numberOfSelectedFilesVault,
      @NonNull CardView vaultBottomPopUpNavigation, @NonNull ImageView vaultClearFileButton,
      @NonNull ImageView vaultFileDelete, @NonNull ImageView vaultFileInfo,
      @NonNull RecyclerView vaultRecyclerView, @NonNull ImageView vaultSelectAllButton,
      @NonNull MaterialToolbar vaultToolBar) {
    this.rootView = rootView;
    this.MoveOutOfVault = MoveOutOfVault;
    this.VaultTopPopUpNavigation = VaultTopPopUpNavigation;
    this.numberOfSelectedFilesVault = numberOfSelectedFilesVault;
    this.vaultBottomPopUpNavigation = vaultBottomPopUpNavigation;
    this.vaultClearFileButton = vaultClearFileButton;
    this.vaultFileDelete = vaultFileDelete;
    this.vaultFileInfo = vaultFileInfo;
    this.vaultRecyclerView = vaultRecyclerView;
    this.vaultSelectAllButton = vaultSelectAllButton;
    this.vaultToolBar = vaultToolBar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentVaultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentVaultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_vault, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentVaultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.MoveOutOfVault;
      ImageView MoveOutOfVault = ViewBindings.findChildViewById(rootView, id);
      if (MoveOutOfVault == null) {
        break missingId;
      }

      id = R.id.VaultTopPopUpNavigation;
      CardView VaultTopPopUpNavigation = ViewBindings.findChildViewById(rootView, id);
      if (VaultTopPopUpNavigation == null) {
        break missingId;
      }

      id = R.id.number_of_selectedFiles_Vault;
      TextView numberOfSelectedFilesVault = ViewBindings.findChildViewById(rootView, id);
      if (numberOfSelectedFilesVault == null) {
        break missingId;
      }

      id = R.id.vault_bottomPopUpNavigation;
      CardView vaultBottomPopUpNavigation = ViewBindings.findChildViewById(rootView, id);
      if (vaultBottomPopUpNavigation == null) {
        break missingId;
      }

      id = R.id.vault_clearFile_button;
      ImageView vaultClearFileButton = ViewBindings.findChildViewById(rootView, id);
      if (vaultClearFileButton == null) {
        break missingId;
      }

      id = R.id.vault_FileDelete;
      ImageView vaultFileDelete = ViewBindings.findChildViewById(rootView, id);
      if (vaultFileDelete == null) {
        break missingId;
      }

      id = R.id.vault_fileInfo;
      ImageView vaultFileInfo = ViewBindings.findChildViewById(rootView, id);
      if (vaultFileInfo == null) {
        break missingId;
      }

      id = R.id.vault_recycler_view;
      RecyclerView vaultRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (vaultRecyclerView == null) {
        break missingId;
      }

      id = R.id.vault_selectAllButton;
      ImageView vaultSelectAllButton = ViewBindings.findChildViewById(rootView, id);
      if (vaultSelectAllButton == null) {
        break missingId;
      }

      id = R.id.vault_toolBar;
      MaterialToolbar vaultToolBar = ViewBindings.findChildViewById(rootView, id);
      if (vaultToolBar == null) {
        break missingId;
      }

      return new FragmentVaultBinding((LinearLayout) rootView, MoveOutOfVault,
          VaultTopPopUpNavigation, numberOfSelectedFilesVault, vaultBottomPopUpNavigation,
          vaultClearFileButton, vaultFileDelete, vaultFileInfo, vaultRecyclerView,
          vaultSelectAllButton, vaultToolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

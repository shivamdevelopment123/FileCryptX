// Generated by view binder compiler. Do not edit!
package coder.sentient.filecryptx.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import coder.sentient.filecryptx.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DeletedialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatButton deleteOperationCancelButton;

  @NonNull
  public final CheckBox deletePermanentlyCheckbox;

  @NonNull
  public final LinearLayout deletePermanentlyCheckboxLayout;

  @NonNull
  public final TextView deletingFileNames;

  @NonNull
  public final TextView deletingFileSize;

  @NonNull
  public final AppCompatButton movetoTrashButton;

  private DeletedialogBinding(@NonNull LinearLayout rootView,
      @NonNull AppCompatButton deleteOperationCancelButton,
      @NonNull CheckBox deletePermanentlyCheckbox,
      @NonNull LinearLayout deletePermanentlyCheckboxLayout, @NonNull TextView deletingFileNames,
      @NonNull TextView deletingFileSize, @NonNull AppCompatButton movetoTrashButton) {
    this.rootView = rootView;
    this.deleteOperationCancelButton = deleteOperationCancelButton;
    this.deletePermanentlyCheckbox = deletePermanentlyCheckbox;
    this.deletePermanentlyCheckboxLayout = deletePermanentlyCheckboxLayout;
    this.deletingFileNames = deletingFileNames;
    this.deletingFileSize = deletingFileSize;
    this.movetoTrashButton = movetoTrashButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DeletedialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DeletedialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.deletedialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DeletedialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.delete_operation_cancel_button;
      AppCompatButton deleteOperationCancelButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteOperationCancelButton == null) {
        break missingId;
      }

      id = R.id.delete_permanently_checkbox;
      CheckBox deletePermanentlyCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (deletePermanentlyCheckbox == null) {
        break missingId;
      }

      id = R.id.delete_permanently_checkbox_layout;
      LinearLayout deletePermanentlyCheckboxLayout = ViewBindings.findChildViewById(rootView, id);
      if (deletePermanentlyCheckboxLayout == null) {
        break missingId;
      }

      id = R.id.deleting_file_names;
      TextView deletingFileNames = ViewBindings.findChildViewById(rootView, id);
      if (deletingFileNames == null) {
        break missingId;
      }

      id = R.id.deleting_file_size;
      TextView deletingFileSize = ViewBindings.findChildViewById(rootView, id);
      if (deletingFileSize == null) {
        break missingId;
      }

      id = R.id.moveto_trash_button;
      AppCompatButton movetoTrashButton = ViewBindings.findChildViewById(rootView, id);
      if (movetoTrashButton == null) {
        break missingId;
      }

      return new DeletedialogBinding((LinearLayout) rootView, deleteOperationCancelButton,
          deletePermanentlyCheckbox, deletePermanentlyCheckboxLayout, deletingFileNames,
          deletingFileSize, movetoTrashButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
